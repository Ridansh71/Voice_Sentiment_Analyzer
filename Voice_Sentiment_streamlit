from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import speech_recognition as sr
import streamlit as st

# Function to perform sentiment analysis on recorded audio
def perform_sentiment_analysis(recorded_audio):
    try:
        recognizer = sr.Recognizer()
        text = recognizer.recognize_google(recorded_audio, language='en-US')
        analyzer = SentimentIntensityAnalyzer()
        sentiment_score = analyzer.polarity_scores(text)
        return text, sentiment_score
    except Exception as ex:
        return None, None

def main():
    st.title('Voice Analyzer')

    # Initialize the recognizer
    recognizer = sr.Recognizer()

    # Check session state to manage recording status
    if "recording" not in st.session_state:
        st.session_state.recording = False

    # Start Recording button
    if st.button("Start Recording"):
        st.session_state.recording = True
        st.session_state.recorded_audio = None

    # Stop Recording button
    if st.button("Stop Recording"):
        st.session_state.recording = False

    # Handle the recording process
    if st.session_state.recording:
        with sr.Microphone() as source:
            st.info("Recording... Speak now.")
            recognizer.adjust_for_ambient_noise(source, duration=2)
            recorded_audio = recognizer.listen(source)

            # Store recorded audio in session state
            st.session_state.recorded_audio = recorded_audio
            st.session_state.recording = False

        st.success('Recording stopped!')

        # Perform sentiment analysis after recording
        if st.session_state.recorded_audio:
            transcribed_text, sentiment_score = perform_sentiment_analysis(st.session_state.recorded_audio)

            # Display results
            if transcribed_text is not None and sentiment_score is not None:
                st.write("### Transcribed Text")
                st.write(transcribed_text)

                st.write("### Sentiment Score")
                st.write(sentiment_score)
            else:
                st.error("Error occurred during transcription or sentiment analysis.")

if __name__ == "__main__":
    main()
